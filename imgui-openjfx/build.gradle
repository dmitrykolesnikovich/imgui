import static org.gradle.internal.os.OperatingSystem.current

plugins {
    id 'maven'
    id 'java'
    id "org.jetbrains.kotlin.jvm"
    id "com.github.johnrengelman.shadow"
//    id 'org.openjfx.javafxplugin' version '0.0.8'
}

ext.moduleName = "${group}.imgui_openjfx"

dependencies {
    implementation "$kot-stdlib"
    implementation project(':imgui-core')
    implementation "$kx:uno-sdk:$uno_version"
    implementation "${kx}.glm:glm:$glm_version"

    def platform = current().isWindows() ? 'win' : current().isLinux() ? 'linux' : 'mac'
    ["base", "graphics"].each {
        implementation "org.openjfx:javafx-$it:11:$platform"
    }

    [""].each {
        String natives = "org.lwjgl:lwjgl$it:$lwjgl_version:natives-$lwjgl_natives"
        runtime natives
        shadow natives
    }

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

//javafx {
//    version = "11.0.2"
//    modules = ['javafx.graphics']
//}

task lightJar(type: Jar) {
    archiveClassifier = 'light'
    from sourceSets.main.output
    exclude 'extraFonts'
    inputs.property("moduleName", moduleName)
//    manifest.attributes('Automatic-Module-Name': moduleName)
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives lightJar
    archives sourcesJar
//    archives javadocJar
}

shadowJar {
    exclude 'module-info.class'
    inputs.property("moduleName", moduleName)
//    manifest.attributes('Automatic-Module-Name': moduleName)
}

jar {
    inputs.property("moduleName", moduleName)
//    manifest.attributes('Automatic-Module-Name': moduleName)
}

shadowJar.archiveClassifier = 'all'

compileKotlin {
    kotlinOptions.jvmTarget = "11"
    destinationDir = compileJava.destinationDir
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "11"
    destinationDir = compileTestJava.destinationDir
}

compileJava {
    doFirst {
//        println("[$moduleName]classpath.asPath: $classpath.asPath")
        options.compilerArgs = [
                '--module-path', classpath.asPath,
//                '--add-modules', 'javafx.graphics',
        ]
        classpath = files()
    }
}
